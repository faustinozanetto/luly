#shader vertex
#version 450

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;

layout (location = 0) out vec2 o_tex_coords;

void main() {
    o_tex_coords = a_tex_coord;
    gl_Position = vec4(a_pos, 1.0);
}

#shader fragment
#version 450

#include "common/camera.lsh"
#include "lighting/pbr.lsh"
#include "lighting/lights.lsh"

layout (location = 0) out vec4 frag_color;

layout (location = 0) in vec2 o_tex_coord;

layout (binding = 0) uniform sampler2D u_position_map;
layout (binding = 1) uniform sampler2D u_albedo_map;
layout (binding = 2) uniform sampler2D u_normal_map;
layout (binding = 3) uniform sampler2D u_rough_metal_ao_map;
layout (binding = 4) uniform samplerCube u_irradiance_map;
layout (binding = 5) uniform samplerCube u_prefilter_map;
layout (binding = 6) uniform sampler2D u_brdf_map;
layout (binding = 7) uniform sampler2D u_ambient_occlusion_map;

vec3 sample_irradiance_map(vec3 normal) {
    return texture(u_irradiance_map, normalize(normal)).rgb;
}

vec3 sample_prefilter_map(vec3 reflection_dir, float roughness) {
    const float MAX_REFLECTION_LOD = 4.0;
    float mip_level = roughness * MAX_REFLECTION_LOD;
    return textureLod(u_prefilter_map, reflection_dir, mip_level).rgb;
}

vec2 sample_brdf_lut_map(vec3 view_dir, vec3 normal, float roughness) {
    float NdotV = clamp(dot(normal, view_dir), 0.0, 1.0);
    return texture(u_brdf_map, vec2(NdotV, roughness)).rg;
}

void main()
{
    vec3 frag_pos = texture(u_position_map, o_tex_coord).rgb;
    vec4 full_albedo = texture(u_albedo_map, o_tex_coord);
    vec3 albedo = pow(full_albedo.rgb, vec3(2.2));
    vec3 normal = texture(u_normal_map, o_tex_coord).rgb;
    vec3 rough_metal_ao = texture(u_rough_metal_ao_map, o_tex_coord).rgb;
        
    float opacity = full_albedo.a;
    float roughness = rough_metal_ao.r;
    float metallic = rough_metal_ao.g;
    float ambient_occlusion = rough_metal_ao.b;
        
    float world_ambient_occlusion = texture(u_ambient_occlusion_map, o_tex_coord).r;
    ambient_occlusion *= world_ambient_occlusion;        
            
    vec3 view_dir = normalize(camera.position.xyz - frag_pos);
    vec3 reflect_dir = reflect(-view_dir, normal);

    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, metallic);

    vec3 luminance = calculate_directional_light_luminance(lights.directional_light, normal, view_dir, albedo, F0, roughness, metallic);
 
    for (int i = 0; i < 16; i++) {
        luminance += calculate_point_light_luminance(lights.point_lights[i], normal, view_dir, frag_pos, albedo, F0, roughness, metallic);   
    }
        
    for (int i = 0; i < 16; i++) {
        luminance += calculate_spot_light_luminance(lights.spot_lights[i], normal, view_dir, frag_pos, albedo, F0, roughness, metallic);
    }
        
    vec3 irradiance = sample_irradiance_map(normal);
    vec3 prefilter = sample_prefilter_map(reflect_dir, roughness);
    vec2 brdf_lut = sample_brdf_lut_map(view_dir, normal, roughness);

    luminance += calculate_ambient_ibl(albedo, normal, view_dir, irradiance,
         prefilter, brdf_lut, F0, roughness, metallic, ambient_occlusion);
        
    vec3 ambient = vec3(0.03) * albedo * ambient_occlusion;
    vec3 color   = ambient + luminance;

    color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0/2.2));

    frag_color = vec4(color, opacity);
}