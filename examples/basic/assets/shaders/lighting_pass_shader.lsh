#shader vertex
#version 450 core

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;

layout (location = 0) out vec2 o_tex_coords;

void main() {
    o_tex_coords = a_tex_coord;
    gl_Position = vec4(a_pos, 1.0);
}

#shader fragment
#version 450 core

#include "common/camera.lsh"
#include "lighting/pbr.lsh"
#include "lighting/lights.lsh"

layout (location = 0) out vec4 frag_color;

layout (location = 0) in vec2 o_tex_coord;

layout (binding = 0) uniform sampler2D u_position_map;
layout (binding = 1) uniform sampler2D u_albedo_map;
layout (binding = 2) uniform sampler2D u_normal_map;
layout (binding = 3) uniform sampler2D u_rough_metal_ao_map;

void main()
{
    vec3 frag_pos = texture(u_position_map, o_tex_coord).rgb;
    vec3 albedo = pow(texture(u_albedo_map, o_tex_coord).rgb, vec3(2.2));
    vec3 normal = texture(u_normal_map, o_tex_coord).rgb;
    vec3 rough_metal_ao = texture(u_rough_metal_ao_map, o_tex_coord).rgb;
        
    float roughness = rough_metal_ao.r;
    float metallic = rough_metal_ao.g;
    float ambient_occlusion = rough_metal_ao.b;
            
    vec3 view_dir = normalize(camera.position - frag_pos);
        
    vec3 luminance = calculate_directional_light_luminance(lights.directional_light, normal, view_dir, albedo, roughness, metallic);

    vec3 ambient = vec3(0.1) * albedo;
    vec3 color = ambient + luminance;
        
    frag_color = vec4(color, 1.0);
}