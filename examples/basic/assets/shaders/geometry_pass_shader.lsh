#shader vertex
#version 450

#include "common/camera.lsh"

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;
layout (location = 2) in vec3 a_normal;
layout (location = 3) in vec3 a_tangent;
layout (location = 4) in vec3 a_bi_tangent;
layout (location = 5) in ivec4 a_bone_ids;
layout (location = 6) in vec4 a_weights;

const int MAX_BONES = 100;
const int MAX_BONE_INFLUENCE = 4;

layout (location = 0) uniform mat4 u_transform_matrix;
layout (location = 1) uniform mat3 u_normal_matrix;

uniform mat4 u_final_bone_matrices[MAX_BONES];
uniform int u_is_skeletal;

struct geometry_out {
    vec3 view_space_frag_pos;
    vec3 frag_pos;
    vec2 tex_coords;
    vec3 normal;
    mat3 tbn;
};

layout (location = 0) out geometry_out o_geometry;
layout (location = 8) out flat int o_actor_id;

uniform int u_actor_id;

void main() {
    vec3 T = normalize(u_normal_matrix * a_tangent);
    vec3 N = normalize(u_normal_matrix * a_normal);
    T = normalize(T - dot(T, N) * N);
    vec3 B = cross(N, T);

    vec4 computed_position = vec4(0.0);
    if (u_is_skeletal == 1) {
        for (int i = 0; i < MAX_BONE_INFLUENCE; i++)
        {
            if (a_bone_ids[i] == -1)
            continue;

            if (a_bone_ids[i] >= MAX_BONES)
            {
                computed_position = vec4(a_pos, 1.0f);
                break;
            }
            vec4 local_position = u_final_bone_matrices[a_bone_ids[i]] * vec4(a_pos, 1.0f);
            computed_position += local_position * a_weights[i];
            // vec3 localNormal = mat3(finalBonesMatrices[a_bone_ids[i]]) * norm;
        }
    } else {
        computed_position = vec4(a_pos, 1.0);
    }

    o_geometry.tbn = mat3(T, B, N);
    o_geometry.normal = N;
    o_geometry.tex_coords = a_tex_coord;
    o_geometry.frag_pos = vec3(u_transform_matrix * computed_position);
    o_geometry.view_space_frag_pos = vec3(camera.view_matrix * computed_position);
    o_actor_id = u_actor_id;

    gl_Position = camera.view_projection_matrix * u_transform_matrix * computed_position;
}

#shader fragment
#version 450 

#include "common/materials.lsh"

struct geometry_out {
    vec3 view_space_frag_pos;
    vec3 frag_pos;
    vec2 tex_coords;
    vec3 normal;
    mat3 tbn;
};

layout(location = 0) in geometry_out o_geometry;
layout(location = 8) in flat int o_actor_id;

// Uniforms
layout (location = 2) uniform material u_material;

// Samplers
layout (binding = 0) uniform sampler2D u_albedo_map;
layout (binding = 1) uniform sampler2D u_normal_map;
layout (binding = 2) uniform sampler2D u_roughness_map;
layout (binding = 3) uniform sampler2D u_metallic_map;
layout (binding = 4) uniform sampler2D u_ambient_occlusion_map;
layout (binding = 5) uniform sampler2D u_opacity_map;
layout (binding = 6) uniform sampler2D u_emissive_map;

// G-Buffer outputs
layout(location = 0) out vec3 g_position;
layout(location = 1) out vec3 g_view_space_position;
layout(location = 2) out vec4 g_albedo_opacity;
layout(location = 3) out vec3 g_normal;
layout(location = 4) out vec3 g_roughmetalao;
layout(location = 5) out vec3 g_emissive;
layout(location = 6) out int g_actor_id;

float extract_data_from_packed_texture(sampler2D texture_map, vec2 tex_coords, float initial_value,
float tilling, int channel_mode, int texture_enabled) {
    float value = initial_value;
    if (texture_enabled == 1) {
        vec3 sampled_value = texture(texture_map, tex_coords * tilling).rgb;

        // Extract the specific channel based on the mode, red, gren, blue, 0, 1, 2.
        if (channel_mode == 0) value = sampled_value.r;
        else if (channel_mode == 1) value = sampled_value.g;
        else if (channel_mode == 2) value = sampled_value.b;
    }

    return value;
}

void main() {
    g_position = o_geometry.frag_pos;
    g_view_space_position = o_geometry.view_space_frag_pos;

    vec4 sampled_albedo = u_material.albedo;
    vec3 albedo = sampled_albedo.rgb;
    if (u_material.albedo_map_enabled == 1) {
        vec4 sampled_albedo_map = texture(u_albedo_map, o_geometry.tex_coords * u_material.tilling);
        albedo *= sampled_albedo_map.rgb;
    }

    float opacity = sampled_albedo.a;
    if (u_material.opacity_map_enabled == 1)
    opacity = texture(u_opacity_map, o_geometry.tex_coords * u_material.tilling).r;

    g_albedo_opacity = vec4(albedo, opacity);

    if (u_material.normal_map_enabled == 1) {
        vec3 normal = texture(u_normal_map, o_geometry.tex_coords * u_material.tilling).rgb;
        normal = normalize(normal * 2.0 - 1.0);
        g_normal = normalize(o_geometry.tbn * normal);
    } else {
        g_normal = o_geometry.normal;
    }

    float roughness = extract_data_from_packed_texture(u_roughness_map, o_geometry.tex_coords,
    u_material.roughness, u_material.tilling, u_material.roughness_channel, u_material.roughness_map_enabled);

    float metallic = extract_data_from_packed_texture(u_metallic_map, o_geometry.tex_coords,
    u_material.metallic, u_material.tilling, u_material.metallic_channel, u_material.metallic_map_enabled);

    float ambient_occlusion = extract_data_from_packed_texture(u_ambient_occlusion_map, o_geometry.tex_coords,
    u_material.ambient_occlusion, u_material.tilling, u_material.ambient_occlusion_channel, u_material.ambient_occlusion_map_enabled);

    g_roughmetalao = vec3(roughness, metallic, ambient_occlusion);

    vec3 emissive = u_material.emissive.rgb * u_material.emissive_strength;
    if (u_material.emissive_map_enabled == 1)
    emissive *= texture(u_emissive_map, o_geometry.tex_coords * u_material.tilling).rgb * u_material.emissive_strength;

    g_emissive = emissive;

    g_actor_id = o_actor_id;
}