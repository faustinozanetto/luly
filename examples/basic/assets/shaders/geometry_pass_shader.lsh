#shader vertex
#version 450

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;
layout (location = 2) in vec3 a_normals;
layout (location = 3) in vec3 a_tangent;
layout (location = 4) in vec3 a_bi_tangent;

layout (location = 0) uniform mat4 u_transform;

layout(set = 0, binding = 0) uniform camera_ubo
{
    mat4 view_matrix;
    mat4 projection_matrix;
    vec3 position;
} camera;

struct geometry_out {
    vec3 frag_pos;
    vec2 tex_coords;
    vec3 normal;
    mat3 tbn;
};

layout (location = 0) out geometry_out o_geometry;

void main() {
    vec4 view_pos  = camera.view_matrix * u_transform * vec4(a_pos, 1.0f);
    o_geometry.tex_coords = a_tex_coord;
    o_geometry.frag_pos = vec3(u_transform * vec4(a_pos, 1.0));
    
    mat3 normalMatrix = transpose(inverse(mat3(u_transform)));
    vec3 T = normalize(normalMatrix * a_tangent);
    vec3 N = normalize(normalMatrix * a_normals);
    T = normalize(T - dot(T, N) * N);
    vec3 B = cross(N, T);
    o_geometry.tbn =  mat3(T, B, N);
    o_geometry.normal = N;
    
    gl_Position = camera.projection_matrix * view_pos;
}

#shader fragment
#version 450 

struct geometry_out {
    vec3 frag_pos;
    vec2 tex_coords;
    vec3 normal;
    mat3 tbn;
};

layout(location = 0) in geometry_out o_geometry;

// G-Buffer outputs
layout(location = 0) out vec4 g_position;
layout(location = 1) out vec4 g_albedo_opacity;
layout(location = 2) out vec4 g_normal;
layout(location = 3) out vec4 g_roughmetalao;
        
void main() {
    g_position = vec4(o_geometry.frag_pos, 1.0);

    vec3 albedo = vec3(0.25, 0.65, 0.35);

    float opacity = 1.0;

    g_albedo_opacity = vec4(albedo, opacity);
}