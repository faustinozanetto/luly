#shader vertex
#version 450

#include "common/camera.lsh"

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;
layout (location = 2) in vec3 a_normals;
layout (location = 3) in vec3 a_tangent;
layout (location = 4) in vec3 a_bi_tangent;

layout (location = 0) uniform mat4 u_transform;

struct geometry_out {
    vec3 frag_pos;
    vec2 tex_coords;
    vec3 normal;
    mat3 tbn;
};

layout (location = 0) out geometry_out o_geometry;

void main() {
    mat3 normalMatrix = transpose(inverse(mat3(u_transform)));
    vec3 T = normalize(normalMatrix * a_tangent);
    vec3 N = normalize(normalMatrix * a_normals);
    T = normalize(T - dot(T, N) * N);
    vec3 B = cross(N, T);
        
    o_geometry.tbn = mat3(T, B, N);
    o_geometry.normal = N;
    o_geometry.tex_coords = a_tex_coord;
    o_geometry.frag_pos = vec3(u_transform * vec4(a_pos, 1.0));
        
    gl_Position = camera.view_projection_matrix * u_transform * vec4(a_pos, 1.0);
}

#shader fragment
#version 450 

#include "common/materials.lsh"

struct geometry_out {
    vec3 frag_pos;
    vec2 tex_coords;
    vec3 normal;
    mat3 tbn;
};

layout(location = 0) in geometry_out o_geometry;

// Uniforms
layout (location = 1) uniform material u_material;
        
// Samplers
layout (binding = 0) uniform sampler2D u_albedo_map;
layout (binding = 1) uniform sampler2D u_normal_map;
layout (binding = 2) uniform sampler2D u_roughness_map;
layout (binding = 3) uniform sampler2D u_metallic_map;
layout (binding = 4) uniform sampler2D u_ambient_occlusion_map;
layout (binding = 5) uniform sampler2D u_opacity_map;

// G-Buffer outputs
layout(location = 0) out vec3 g_position;
layout(location = 1) out vec4 g_albedo_opacity;
layout(location = 2) out vec3 g_normal;
layout(location = 3) out vec3 g_roughmetalao;
        
void main() {
    g_position = o_geometry.frag_pos;

    vec3 albedo = u_material.albedo;
    if (u_material.albedo_map_enabled == 1)
        albedo *= texture(u_albedo_map, o_geometry.tex_coords * u_material.tilling).rgb;
        
    float opacity = 1.0;
    if (u_material.opacity_map_enabled == 1)
        opacity = texture(u_opacity_map, o_geometry.tex_coords * u_material.tilling).r;

    g_albedo_opacity = vec4(albedo, opacity);
        
    if (u_material.normal_map_enabled == 1) {
        vec3 normal = texture(u_normal_map, o_geometry.tex_coords * u_material.tilling).rgb;
        normal = normalize(normal * 2.0 - 1.0);
        g_normal = normalize(o_geometry.tbn * normal);
    } else {
        g_normal = o_geometry.normal;
    }
    
    float roughness = u_material.roughness;
    if (u_material.roughness_map_enabled == 1)
        roughness = texture(u_roughness_map, o_geometry.tex_coords * u_material.tilling).r;
    
    float metallic = u_material.metallic;
    if (u_material.metallic_map_enabled == 1)
        metallic = texture(u_metallic_map, o_geometry.tex_coords * u_material.tilling).r;
    
    float ambient_occlusion = u_material.ambient_occlusion;
    if (u_material.ambient_occlusion_map_enabled == 1)
        ambient_occlusion = texture(u_ambient_occlusion_map, o_geometry.tex_coords * u_material.tilling).r;
    
    g_roughmetalao = vec3(roughness, metallic, ambient_occlusion);
}