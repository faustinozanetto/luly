#shader vertex
#version 450

#include "common/geometry.lsh"

layout (location = 0) in vec3 a_pos;
layout (location = 5) in ivec4 a_bone_ids;
layout (location = 6) in vec4 a_weights;
        
layout (location = 0) uniform mat4 u_transform;

void main()
{
    vec4 computed_position = compute_geometry_position(a_pos, a_bone_ids, a_weights, u_is_skeletal);
    gl_Position = u_transform * computed_position;
}
  
#shader geometry
#version 450

#include "common/shadows.lsh"

layout(triangles, invocations = 6) in;
layout(triangle_strip, max_vertices = 3) out;

void main()
{
    for (int i = 0; i < 6; ++i)
    {
        gl_Position = u_directional_light_space_matrices[gl_InvocationID] * gl_in[i].gl_Position;
        gl_Layer = gl_InvocationID;
        EmitVertex();
    }
    EndPrimitive();
}

#shader fragment
#version 450

void main()
{
}