#shader vertex
#version 450

#include "common/geometry.lsh"

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;
layout (location = 5) in ivec4 a_bone_ids;
layout (location = 6) in vec4 a_weights;
        
layout (location = 0) out vec2 o_tex_coord;

layout (location = 0) uniform mat4 u_transform;

void main()
{
    vec4 computed_position = compute_geometry_position(a_pos, a_bone_ids, a_weights, u_is_skeletal);

    o_tex_coord = a_tex_coord;
    gl_Position = u_transform * computed_position;
}
  
#shader geometry
#version 450

layout (triangles) in;
layout (triangle_strip, max_vertices=18) out;

uniform mat4 u_shadow_transforms[6];

layout (location = 1) out vec4 o_frag_pos;

void main()
{
    for(int face = 0; face < 6; ++face)
    {
        gl_Layer = face; // built-in variable that specifies to which face we render.
        for(int i = 0; i < 3; ++i) // for each triangle's vertices
        {
            o_frag_pos = gl_in[i].gl_Position;
            gl_Position = u_shadow_transforms[face] * o_frag_pos;
            EmitVertex();
        }
        EndPrimitive();
    }
}
        
#shader fragment
#version 450

layout (location = 0) in vec2 o_tex_coord;
layout (location = 1) in vec4 o_frag_pos;

uniform vec3 u_light_pos;
uniform float u_far_plane;

void main()
{
    float lightDistance = length(o_frag_pos.xyz - u_light_pos);
    
    // map to [0;1] range by dividing by far_plane
    lightDistance = lightDistance / u_far_plane;
    
    // write this as modified depth
    gl_FragDepth = lightDistance;
}